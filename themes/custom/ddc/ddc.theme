<?php

/**
 * @file
 * Functions to support theming in the ddc theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
// $node = Drupal::request()->attributes->get('node');

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function ddc_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }

  if (($node = \Drupal::routeMatch()->getParameter('node')) && $node instanceof \Drupal\node\NodeInterface) {
    $script = array(
      '#tag' => 'meta',
      '#attributes' => array('type' => 'application/ld+json'),
      '#value' => '',
      $node->field_schema_markup->value,
    );

    $page['#attached']['html_head'][] = [$script, 'meta'];
  }

}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function ddc_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function ddc_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // ddc has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'ddc/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function ddc_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function ddc_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function ddc_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function ddc_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function ddc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $form[$key]['submit']['#attributes']->addClass('search-form__submit');
  }
}
 
/**
 * Implements hook_preprocess_HOOK() for site's logo.
 */
function ddc_preprocess_page(&$variables) {
  //      $variables['logopath'] = '/' . drupal_get_path('theme','ddc') . '/logo.png';
  $site_config = \Drupal::config('system.site');
   $variables['logopath'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));
  }


/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 * Needing to add page--<content_type_name>.html.twig to build
 */
function ddc_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  //-- accesses the content type on page landing
  $access_content_type = _ddc__access_content_type(); //-- custom function
  //
  if ($access_content_type != NULL ) {
      $suggestions[] = 'page__' .$access_content_type;
  }
}

/**
 * Access current content type on page load.
 * Changing the function name protects you 
 * from other modules.
 * @return mixed
 */
function _ddc__access_content_type(){
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
     return  $node->bundle();
  }
  return NULL;
}

// Rendering views as a block
function mytheme_preprocess_node(&$variables) {
  $variables['view1'] = views_embed_view('view1', 'block_front_page_banner');
}

// function ddc_preprocess_views_view_field(&$variables) {
//   $variables['output'] = $variables['field']
//     ->advancedRender($variables['row']);
// }